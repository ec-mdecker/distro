<?php
/**
 * @file
 * Custom module to place content on site using menu system
 */

/**
 * Implements hook_field_info().
 */
function menu_block_placement_field_info() {

  return array(
    'menu_block_placement_reference' => array(
      'label' => t('Menu Block Placement'),
      'description' => t('This field allows the user to use the menu to place blocks on pages and sub pages.'),
      'default_widget' => 'menu_block_placement_widget',
      'default_formatter' => 'list_default',
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

function menu_block_placement_field_widget_info() {
  return array(
    'menu_block_placement_widget' => array(
      'label' => t('Menu Block Placement'),
      'field types' => array('menu_block_placement_reference'),
    )
  );
}

function menu_block_placement_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //creates the array for the regions select list
  $available_regions = array();
  $path_to_info = drupal_get_path('theme', variable_get('theme_default', NULL)) . '/' . variable_get('theme_default', NULL) . '.info';
  $theme_settings = drupal_parse_info_file($path_to_info);
  if (isset($theme_settings['settings']['menu_block_placement'])) {
    foreach ($theme_settings['settings']['menu_block_placement'] as $key => $value) {
      if ($value) {
        $available_regions[$key] = $theme_settings['regions'][$key];
      }
    }
  }
  //if no block placement regions are labeled in the info file, all regions will be displayed in the dropdown
  else {
    if (isset($theme_settings['regions'])) {
      $available_regions = $theme_settings['regions'];
    }
  }

  dpm($items);

  $element['container'] = array(
    '#type' => 'fieldset',
    '#title' => t($instance['label']),
  );
  //multiselect list for menu items
  $element['mlid'] = array(
    '#type' => 'select',
    '#title' => t('Menu Item'),
    '#size' => 6,
    '#options' => menu_block_placement_menu_options($field),
    '#multiple' => TRUE,
    '#default_value' => isset($items[0]['mlid']) ? $items[0]['mlid'] : '',
  );
  //select list for the regions as established in the theme info file
  $element['region'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => $available_regions,
    '#required' => TRUE,
    '#default_value' => isset($items[0]['region']) ? $items[0]['region'] : '',
  );
  //checkbox to apply to only the individual page, not children
  $element['individual_pages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display only on the selected pages'),
    '#default_value' => isset($items[0]['individual_pages']) ? $items[0]['individual_pages'] : '',
  );
  return $element;
}

function menu_block_placement_menu_options($field) {
  $options = array();
  if (isset($field["settings"]["default_menus"])) {
    $default_menus = $field["settings"]["default_menus"];
  }
  else {
    return FALSE;
  }
  foreach ($default_menus as $key => $value) {
    if ($value === 0) {
      unset($default_menus[$key]);
    }
  }

  $items = menu_parent_options($default_menus, array("mlid" => 0));
  foreach ($items as $key => $value) {
    $exploded_key = explode(":", $key);
    $menu_machine_name = ucwords(str_replace("-", " ", array_shift($exploded_key)));
    $menu_id = array_pop($exploded_key);
    if ($menu_id != 0) {
      $options[$menu_machine_name][$menu_id] = str_replace(array(
        "<",
        ">"
      ), "", $value);
    }
  }
  return $options;
}

/**
 * Implements hook_field_formatter_view().
 */
/*function menu_block_placement_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'list_default':
      $allowed_values = list_allowed_values($field, $instance, $entity_type, $entity);

      foreach ($items as $delta => $item) {
        if (isset($item['mlid'])) {
          $element[$delta] = array('#markup' => field_filter_xss($item['mlid']));
        }
      }
      break;

  }

  return $element;
}*/

/**
 * Implements hook_field_settings_form().
 */
function menu_block_placement_field_settings_form($field, $instance) {

  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $menus = menu_get_menus();

  $options = array();
  foreach ($menus as $key => $menu) {
    $options[$key] = $menu;
  }
  if (!isset($settings['default_menus'])) {
    $settings['default_menus'] = array();
  }

  $form['default_menus'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Default Menu Options'),
    '#options' => $options,
    '#default_value' => $settings['default_menus'],
    '#description' => t('Select which menus will be availible to the content editor'),
  );

  return $form;

}

/**
 * Implements hook_field_widget_info_alter().
 */
function menu_block_placement_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'menu_block_placement_reference';
}

/**
 * Immplements hook_options_list().
 */
function menu_block_placement_options_list($field, $instance, $entity_type, $entity) {
  //return menu_block_placement_options_callback();
  if (isset($field["settings"]["default_menus"])) {
    $default_menus = $field["settings"]["default_menus"];
  }
  else {
    return FALSE;
  }


  foreach ($default_menus as $key => $value) {
    if ($value === 0) {
      unset($default_menus[$key]);
    }
  }

  $settings_form_shown = FALSE;
  if (!empty($entity)) {
    $settings_form_shown = TRUE;
  }

  $menus = menu_get_menus();

  $options = array();

  if ($settings_form_shown === TRUE) {

    $options = array();

    $items = menu_parent_options($default_menus, array("mlid" => 0));

    foreach ($items as $key => $value) {
      $exploded_key = explode(":", $key);

      $menu_machine_name = ucwords(str_replace("-", " ", array_shift($exploded_key)));

      $menu_id = array_pop($exploded_key);

      if ($menu_id != 0) {
        $options[$menu_machine_name][$menu_id] = str_replace(array(
          "<",
          ">"
        ), "", $value);
      }
    }

  }

  return $options;
}

/*function menu_block_placement_field_widget_form_alter(&$element, &$form_state, $context) {

  // Add a css class to widget form elements for all fields of type mytype.
  if ($context['field']['type'] == 'mytype') {
    // Be sure not to overwrite existing attributes.
    $element['#attributes']['class'][] = 'myclass';
  }
}*/

/*function menu_block_placement_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  die("hello");
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return array('value' => $element);
}*/

/**
 * Implements hook_field_widget_error().
 */
function menu_block_placement_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_is_empty().
 */
function menu_block_placement_field_is_empty($item, $field) {
  if (!is_array($item)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implement hook_views_api().
 */
function menu_block_placement_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'menu_block_placement') . '/includes',
  );
}